Eclipse Project config for Windows
This tutorial was written by Ngoc Minh Nguyen

Setting up Eclipse
Once your new Eclipse installation launches, follow these steps:

Import New Project

1. Eclipse makes use of the Makefile support in ESP-IDF. This means you need to start by creating an ESP-IDF project.
2. Once Eclipse is running, choose File -> Import...
3. In the dialog that pops up, choose “C/C++” -> “Existing Code as Makefile Project” and click Next.
4. On the next page, enter “Existing Code Location” to be the directory of your IDF project. Don’t specify the path to the ESP-IDF directory itself.
5. On the same page, under “Toolchain for Indexer Settings” choose “Cross GCC”. Then click Finish.

Project Properties
1. The new project will appear under Project Explorer. Right-click the project and choose Properties from the context menu.
2. Click on the “Environment” properties page under “C/C++ Build”. Click “Add...” and enter name V and value 1.
3. Click “Add...” again, and enter name IDF_PATH. The value should be the full path where ESP-IDF is installed. 
Windows users: Use forward-slashes not backslashes for this path, ie 

- C:/path/to/esp-idf

Windows users only, follow these two additional steps:

1. On the same Environment property page, edit the PATH environment variable. Delete the existing value and replace it with 

- C:\msys32\usr\bin;C:\msys32\mingw32\bin;C:\msys32\opt\xtensa-esp32-elf\bin
(If you installed msys32 to a different directory then you’ll need to change these paths to match).

2. Click on the “C/C++ Build” top-level properties page then uncheck “Use default build command” and enter this for the custom build command: 

- bash ${IDF_PATH}/tools/windows/eclipse_make.sh

All users, continue with these steps:

1. Navigate to “C/C++ General” -> “Preprocessor Include Paths” property page:

2. Click the “Providers” tab
3. In the list of providers, click “CDT Cross GCC Built-in Compiler Settings”. Under “Command to get compiler specs”, 
replace the text ${COMMAND} at the beginning of the line with 

- xtensa-esp32-elf-gcc

This means the full “Command to get compiler specs” should be xtensa-esp32-elf-gcc ${FLAGS} -E -P -v -dD "${INPUTS}".

4. In the list of providers, click “CDT GCC Build Output Parser” and type 

- xtensa-esp32-elf-

at the beginning of the Compiler command pattern. This means the full Compiler command pattern should be xtensa-esp32-elf-(g?cc)|([gc]\+\+)|(clang)

5.Click OK to close the Properties dialog, and choose Project -> Build to build your project.

Flash from Eclipse

You can integrate the “make flash” target into your Eclipse project to flash using esptool.py from the Eclipse UI:

1. Right-click your project in Project Explorer (important to make sure you select the project, not a directory in the project, or Eclipse may find the wrong Makefile.)
2. Select Build Targets -> Create...
3. Type “flash” as the target name. Leave the other options as their defaults.
4. Now you can use Project -> Build Targets -> Build... to build the custom flash target, which will compile and flash the project.
5. While flashing press Boot button on the esp32 device ("hard reset"). 

Add Include files in Eclipse project

1. To set properties for your project, right-click your CDT project and select Properties. 
Alternatively, to set properties for a specific source file in your project, 
right-click a source file within your make project and select Properties.
2. Expand C/C++ General and select Paths and Symbols.
3. Select GNU C 
4. Click Add to define new element (Include Path, Symbol, Library path etc).
5. In Directory: 
type for example your lib location 
- ${IDF_PATH}/components/newlib/include
- ${IDF_PATH}/components/freertos/include
- ${IDF_PATH}/components/nvs_flash/include
- ${IDF_PATH}/components/driver/include
- ${IDF_PATH}/components/log/include
- ${IDF_PATH}/components/spi_flash/include
- ${IDF_PATH}/components/esp32/include


for mqtt type
- ${IDF_PATH}/components/esp-mqtt